exports.Server = function(onJoin, onQuit, onUpdate, onMove, onCheckIn, onServerEmpty){
	var app = require('http').createServer(handler)
	  , io = require('socket.io').listen(app,{ log: false })
	  , fs = require('fs');

	  console.log("GAMER SERVER STARTED!!!");
	app.listen(8090);
	io.set('close timeout', 60);

	function PlayerQuit(id){
		Indicies.push(id);
		Sockets[id] = null;
		Players[id] = null;
	}
	/*
	   _____ _       _           _  __      __              
	  / ____| |     | |         | | \ \    / /              
	 | |  __| | ___ | |__   __ _| |  \ \  / __ _ _ __ ___   
	 | | |_ | |/ _ \| '_ \ / _` | |   \ \/ / _` | '__/ __|  
	 | |__| | | (_) | |_) | (_| | |    \  | (_| | |  \__ \_ 
	  \_____|_|\___/|_.__/ \__,_|_|     \/ \__,_|_|  |___(_)
	 */                                                      
	var ID_LAST = 0;
	var Players = [], Sockets = [], Indicies = [];
	var GameData = {};
	var lastTime = (new Date()).getTime();


	function handler (req, res) {
	  var file = req.url == '/' ? '/index.html' : req.url;
		
	  console.log(file);
	  fs.readFile(__dirname + "/.." + file,
	  function (err, data) {
		if (err) {
			res.writeHead(500);
			return res.end('Error loading index.html');
		}

	    res.writeHead(200);
	    res.end(data);
	  });
	}

	io.sockets.on('disconnect', function(socket){
		socket.get('Player', function(err, player){
			PlayerQuit(player.ID);
		});
	});

	io.sockets.on('connection', function (socket) {
		console.log('Incomming connection');
		socket.on('JoinGame', function(name){

			Indicies = Indicies.sort();

			var player = onJoin(socket, name);
			if(player){
				if(Indicies.length){
					var i = Indicies.pop();
					player.ID = i;
					Players[i] = player;
					Sockets[i] = socket;
				}
				else{
					player.ID = ID_LAST++
					Players.push(player);
					Sockets.push(socket);
				}
				socket.set('Player', player, function(){
					socket.Name = name;
					socket.emit('joined', {Player: player, Others: Players});
					player.LastCheckin = lastTime;
				});
			}
		});

		socket.on('RequestMove', function(moveData){
			socket.get('Player', function(err, player){
				if(!player){
					socket.emit('error', {Error:'Player not found...'});
					return;
				}

				onMove(player,moveData);
			});
		});

		socket.on('RequestCheckIn', function(name){
			socket.get('Player', function(err, player){
				if(player){
					onCheckIn(player);
					player.LastCheckin = lastTime;
				}
			});
		});
	});

	setInterval(function(){
		var dt = (new Date()).getTime() - lastTime;
		var data = [], quit = [];

		for(var i = Players.length; i--;){
			var p = Players[i];
			if(!p){
				continue;
			}

			if(lastTime - p.LastCheckin > 5000){
				onQuit(p, Players.length - Indicies.length);
				quit.push(p);
				PlayerQuit(i);
				if(Players.length - Indicies.length == 0){
					console.log(Players.length + ' - ' + Indicies.length + ' = ' + (Players.length - Indicies.length));
					onServerEmpty();
				}
				continue;
			}
		}

		data = onUpdate(Players, dt); 

		for(var i = Sockets.length; i--;){
			if(!Sockets[i]) continue;
			var s = Sockets[i].emit('PushUpdate', {
				GameData: data,
				PlayersQuit: quit,
				LastUpdate: lastTime
			});
		}

		lastTime = (new Date()).getTime();
	}, 64);
};
